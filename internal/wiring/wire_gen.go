// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/google/wire"
	"github.com/haiyen11231/Internet-download-manager/internal/configs"
	"github.com/haiyen11231/Internet-download-manager/internal/data_access"
	"github.com/haiyen11231/Internet-download-manager/internal/data_access/database"
	"github.com/haiyen11231/Internet-download-manager/internal/handler"
	"github.com/haiyen11231/Internet-download-manager/internal/handler/grpc"
	"github.com/haiyen11231/Internet-download-manager/internal/logic"
)

// Injectors from wire.go:

func InitializeGRPCServer(configFilePath configs.ConfigFilePath) (grpc.Server, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return nil, nil, err
	}
	configsDatabase := config.Database
	db, cleanup, err := database.InitializeDB(configsDatabase)
	if err != nil {
		return nil, nil, err
	}
	goquDatabase := database.InitializeGoquDB(db)
	accountDataAccessor := database.NewAccountDataAccessor(goquDatabase)
	accountPasswordDataAccessor := database.NewAccountPasswordDataAccessor(goquDatabase)
	account := config.Account
	hash := logic.NewHash(account)
	logicAccount := logic.NewAccount(goquDatabase, accountDataAccessor, accountPasswordDataAccessor, hash)
	goLoadServiceServer := grpc.NewHandler(logicAccount)
	server := grpc.NewServer(goLoadServiceServer)
	return server, func() {
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(configs.WireSet, data_access.WireSet, logic.WireSet, handler.WireSet)
